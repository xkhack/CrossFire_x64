; Vertex Data:
;   v0    -  Position
;   v1    -  Normal
;   v2    -  uv1
;
; Constant Data:
;   c0    -  Constant Vector (0.0, 0.5, 1.0, 2.0)
;   c1:c4 -  Projection Matrix
;   c5:c8 -  ModelViewProj Matrix
;   c5    -  Light direction
;   c6	  -  Light color

vs.1.1

// Transform position (all the way)...
LT_MACRO_RIGIDTRANS4<oPos,v0,c5>			// Rigid Transform...
LT_MACRO_SKINBLENDTRANS4<r0,v0,v1,v2,r1,r2,c26>		// Skin Blended Transform (Position)...
LT_MACRO_SKINTRANS4<oPos,r0,c1>				// Skin Projection...
LT_MACRO_SKINBLENDTRANS3<r6,v3,v1,v2,r1,r2,c26>		// Skin Blended Transform (Normal)...

LT_MACRO_IFSKIN<dp3 r6.w, r6,  r6>			// Normalize the normal...
LT_MACRO_IFSKIN<rsq r6.w, r6.w>
LT_MACRO_IFSKIN<mul r6,   r6,  r6.w>

// Do the Lighting...
LT_MACRO_IFRIGID<mov r9,v1>				// Put the normal into r9
LT_MACRO_IFSKIN<mov r9,v3>
mov r5.xyz,  c22.xyz
mul r4.xyz,  c25.xyz, r5.xyz				// Ambiet Light first...
add r4.xyz,  r4.xyz,  c24.xyz				// Add in Emissive...
LT_MACRO_IFRIGID<add r5, -v0, c10>			// Rigid: Light Vector (Model Space)...
LT_MACRO_IFSKIN<add r5, -r0, c13>			// Skin: Light Vector (Camera Space)...
mov r10, r5						// Save off the light vector that we'll used for the aniso...
LT_MACRO_LIGHT_ATT<r3.x,r5,r9,r6,r1,r2,c19>
max r3.x,    r3.x,    c0.x
mul r3.xyz,  r3.xxx,  c23.xyz				// Material Attenuation...
mad r4.xyz,  r3.xyz,  c16.xyz,    r4.xyz		// Add in light 1...
LT_MACRO_IFRIGID<add r5, -v0, c11>			// Rigid: Light Vector (Model Space)...
LT_MACRO_IFSKIN<add r5, -r0, c14>			// Skin: Light Vector (Camera Space)...
LT_MACRO_LIGHT_ATT<r3.x,r5,r9,r6,r1,r2,c20>
max r3.x,    r3.x,    c0.x
mul r3.xyz,  r3.xxx,  c23.xyz				// Material Attenuation...
mad r4.xyz,  r3.xyz,  c17.xyz,    r4.xyz		// Add in light 2...
LT_MACRO_IFRIGID<add r5, -v0, c12>			// Rigid: Light Vector (Model Space)...
LT_MACRO_IFSKIN<add r5, -r0, c15>			// Skin: Light Vector (Camera Space)...
LT_MACRO_LIGHT_ATT<r3.x,r5,r9,r6,r1,r2,c21>
max r3.x,    r3.x,    c0.x
mul r3.xyz,  r3.xxx,  c23.xyz				// Material Attenuation...
mad oD0.xyz, r3.xyz,  c18.xyz,    r4.xyz		// Add in light 3...


// Aniso: x = l dot n, y = h dot n...
// We're just taking the first light for the aniso lighting (nicer way might be to average like the dot3 one)...
dp3 r10.w, r10,  r10					// Normalize the saved off light vector...
rsq r10.w, r10.w
mul r10,   r10,  r10.w
LT_MACRO_IFRIGID<dp3 oT1.x, r10, v1>			// oT0.x is l dot n (Model space)...
LT_MACRO_IFSKIN<dp3 oT1.x,  r10, r6>			// oT0.x is l dot n (Camera space)...

// Figure out the eye vector...
LT_MACRO_IFRIGID<add r8,   c9, -v0>			// Rigid: Camera - vert pos (Model space)...
LT_MACRO_IFRIGID<dp3 r8.w, r8,  r8>			// Normalize it...
LT_MACRO_IFRIGID<rsq r8.w, r8.w>
LT_MACRO_IFRIGID<mul r8,   r8,  r8.w>
LT_MACRO_IFSKIN<mov r8,    r0>				// Skin: vert pos (camera space)...
LT_MACRO_IFSKIN<dp3 r8.w,  r8,  r8>			// Normalize it...
LT_MACRO_IFSKIN<rsq r8.w,  r8.w>
LT_MACRO_IFSKIN<mul r8,    r8,  r8.w>
add r9, r10, r8						// R9 is h (half angle vector, that is l + e)...
LT_MACRO_IFRIGID<dp3 oT1.y, r9, v1>			// oT0.y is h dot n (Model space)...
LT_MACRO_IFSKIN<dp3 oT1.y,  r9, r6>			// oT0.y is h dot n (Camera space)...

// Output UVs...
LT_MACRO_IFRIGID<mov  oT0,   v2>
LT_MACRO_IFSKIN<mov   oT0,   v4>

