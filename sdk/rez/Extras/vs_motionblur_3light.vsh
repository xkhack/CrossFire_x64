; Vertex Data:
;   v0    -  Position
;   v1    -  Normal
;   v2    -  uv1
;
; Constant Data:
;   c0    -  Constant Vector (0.0, 0.5, 1.0, 2.0)
;   c1:c4 -  Projection Matrix
;   c5:c8 -  ModelViewProj Matrix
;   c5    -  Light direction
;   c6	  -  Light color

vs.1.1

// Transform position (all the way)...
LT_MACRO_RIGIDTRANS4<r9,v0,c25>				// Rigid Transform (Prev Transform)...
LT_MACRO_RIGIDTRANS4<r10,v0,c1>				// Rigid Transform (Current Transform)...

// Take the difference (in view sapce)...
add r2.xyz, -r9.xyz, r10.xyz

// Scale by c0.w...
mul r2.xyz, r2.xyz, c0.w

// Transform normal into view space...
LT_MACRO_RIGIDTRANS3<r11,v1,c1>	

// Dot the difference with the transformed normal...
dp3 r2.w, r2.xyz, r11.xyz

// if r2.w < 0, then r4 = r9, else r4 = r10
slt r3.w,   r2.w, c0.x
mad r4.xyz, r3.w, -r2,  r10
expp r4.w,  v0.x					// Generate constant 1.0

// Compute final postion
LT_MACRO_RIGIDTRANS4<oPos,r4,c5>

// Compute alpha component depending on the length of motion vector...
dp3 r2.w, r2, r2
rsq r1.w, r2.w
mul r2.w, r2.w, r1.w					// r2.w now contains the length of the motion vector...

// Select the alpha based on using the current or prev frame...
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r2.w
mul r3.w, r3.w, r2.w
max r4.w,  r3.w, c0.x
min r4.w,  r4.w, c0.z
add oD0.w, c0.z, -r4.w

LT_MACRO_SKINBLENDTRANS4<r0,v0,v1,v2,r1,r2,c25>		// Skin Blended Transform (Position)...
LT_MACRO_SKINTRANS4<oPos,r0,c1>				// Skin Projection...
LT_MACRO_SKINBLENDTRANS3<r6,v3,v1,v2,r1,r2,c25>		// Skin Blended Transform (Normal)...

LT_MACRO_IFSKIN<dp3 r6.w, r6,  r6>			// Normalize the normal...
LT_MACRO_IFSKIN<rsq r6.w, r6.w>
LT_MACRO_IFSKIN<mul r6,   r6,  r6.w>

// Do the Lighting...
LT_MACRO_IFRIGID<mov r9,v1>				// Put the normal into r9
LT_MACRO_IFSKIN<mov r9,v3>
mov r5.xyz,  c21.xyz
mul r4.xyz,  c24.xyz, r5.xyz				// Ambiet Light first...
add r4.xyz,  r4.xyz,  c23.xyz				// Add in Emissive...
LT_MACRO_IFRIGID<add r5, -v0, c9>			// Rigid: Light Vector (Model Space)...
LT_MACRO_IFSKIN<add r5, -r0, c12>			// Skin: Light Vector (Camera Space)...
LT_MACRO_LIGHT_ATT<r3.x,r5,r9,r6,r1,r2,c18>
max r3.x,    r3.x,    c0.x
mul r3.xyz,  r3.xxx,  c22.xyz				// Material Attenuation...
mad r4.xyz,  r3.xyz,  c15.xyz,    r4.xyz		// Add in light 1...
LT_MACRO_IFRIGID<add r5, -v0, c10>			// Rigid: Light Vector (Model Space)...
LT_MACRO_IFSKIN<add r5, -r0, c13>			// Skin: Light Vector (Camera Space)...
LT_MACRO_LIGHT_ATT<r3.x,r5,r9,r6,r1,r2,c19>
max r3.x,    r3.x,    c0.x
mul r3.xyz,  r3.xxx,  c22.xyz				// Material Attenuation...
mad r4.xyz,  r3.xyz,  c16.xyz,    r4.xyz		// Add in light 2...
LT_MACRO_IFRIGID<add r5, -v0, c11>			// Rigid: Light Vector (Model Space)...
LT_MACRO_IFSKIN<add r5, -r0, c14>			// Skin: Light Vector (Camera Space)...
LT_MACRO_LIGHT_ATT<r3.x,r5,r9,r6,r1,r2,c20>
max r3.x,    r3.x,    c0.x
mul r3.xyz,  r3.xxx,  c22.xyz				// Material Attenuation...
mad oD0.xyz, r3.xyz,  c17.xyz,    r4.xyz		// Add in light 3...

// Output UVs...
LT_MACRO_IFRIGID<mov  oT0,   v2>
LT_MACRO_IFSKIN<mov   oT0,   v4>
LT_MACRO_IFRIGID<mov  oT1,   v2>
LT_MACRO_IFSKIN<mov   oT0,   v4>